import { Component, OnInit } from '@angular/core';
import { DesignService } from '../../services/design.service';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { CommonModule } from '@angular/common';
import { Design } from '../../models/design.model';

@Component({
  selector: 'app-design-list',
  standalone: true,
  imports: [FormsModule, MatButtonModule, MatInputModule, MatListModule, MatProgressSpinnerModule, CommonModule],
  templateUrl: './design-list.component.html',
  styleUrls: ['./design-list.component.css'] // Fixed 'styleUrls' instead of 'styleUrl'
})
export class DesignListComponent implements OnInit {
  designs: Design[] = [];
  isLoading = true;
  errorMessage: string = '';
  showCreateForm = false;
  newDesign: Design = {
    id: 0, // This will be generated by the backend
    name: '',
    category: '',
    color: '',
    size: '',
    logo: '',
    text: '',
    logoPosition: '',
    font: '',
    customer: null,
    designManager: null,
    approved: false
  };

  constructor(private designService: DesignService) {}

  ngOnInit(): void {
    this.fetchDesigns();
  }

  fetchDesigns(): void {
    this.designService.getDesigns().subscribe({
      next: (data: Design[]) => {
        this.designs = data;
        this.isLoading = false;
      },
      error: (error: any) => {
        this.errorMessage = `Error Code: ${error.status}\nMessage: ${error.message || error.statusText || 'Unknown error'}`;
        this.isLoading = false;
      }
    });
  }

  editDesign(id: number): void {
    console.log('Edit design with ID:', id);
    // Implement navigation logic to edit page if needed
  }

  deleteDesign(id: number): void {
    if (confirm('Are you sure you want to delete this design?')) {
      this.designService.deleteDesign(id).subscribe({
        next: () => {
          this.designs = this.designs.filter(design => design.id !== id);
          console.log('Design deleted successfully');
        },
        error: (error: any) => {
          this.errorMessage = `Error Code: ${error.status}\nMessage: ${error.message}`;
          console.error('There was an error deleting the design!', error);
        }
      });
    }
  }

  toggleCreateForm(): void {
    this.showCreateForm = !this.showCreateForm;
  }

  createDesign(): void {
    this.designService.createDesign(this.newDesign).subscribe({
      next: (design) => {
        this.designs.push(design);
        this.resetForm();
        this.showCreateForm = false;
        console.log('Design created successfully');
      },
      error: (error: any) => {
        this.errorMessage = `Error Code: ${error.status}\nMessage: ${error.message || error.statusText || 'Unknown error'}`;
        console.error('There was an error creating the design!', error);
      }
    });
  }

  resetForm(): void {
    this.newDesign = {
      id: 0,
      name: '',
      category: '',
      color: '',
      size: '',
      logo: '',
      text: '',
      logoPosition: '',
      font: '',
      customer: null,
      designManager: null,
      approved: false
    };
  }
}
