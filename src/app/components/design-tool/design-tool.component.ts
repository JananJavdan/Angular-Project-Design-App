import { AfterViewInit, Component, OnInit } from '@angular/core';
import { DesignService } from '../../services/design.service';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { CommonModule } from '@angular/common';
import { Design } from '../../models/design.model';
import * as fabric from 'fabric';

@Component({
  selector: 'app-design-list',
  standalone: true,
  imports: [
    FormsModule,
    MatButtonModule,
    MatInputModule,
    MatListModule,
    MatProgressSpinnerModule,
    CommonModule,
  ],
  templateUrl: './design-tool.component.html',
  styleUrls: ['./design-tool.component.css'],
})
export class DesignToolComponent implements OnInit, AfterViewInit {
  private canvas!: fabric.Canvas;
  designs: Design[] = [];
  isLoading = true;
  errorMessage: string = '';
  showCreateForm = false;
  newDesign: Design = {
    id: 0, // This will be generated by the backend
    name: '',
    category: '',
    color: '',
    size: '',
    logo: '',
    text: '',
    logoPosition: '',
    font: '',
    customer: null,
    designManager: null,
    approved: false,
    title: '',
    description: '',
    imageUrl: 'sample-image-url.png'
  };

  constructor(private designService: DesignService) {}

  ngOnInit(): void {}

  ngAfterViewInit(): void {
    this.canvas = new fabric.Canvas('canvas', {
      width: 800,
      height: 600,
      backgroundColor: '#ffffff',
    });
  }

  addText(): void {
    const text = new fabric.Text('New Text', { left: 100, top: 100 });
    this.canvas.add(text);
  }

  addShape(): void {
    const rect = new fabric.Rect({
      left: 100,
      top: 100,
      fill: 'red',
      width: 50,
      height: 50,
    });
    this.canvas.add(rect);
  }

  triggerImageUpload(): void {
    document.getElementById('imageUpload')?.click();
  }

  onImageUpload(event: any): void {
    const file = event.target.files[0];
    const reader = new FileReader();
  
    reader.onload = (e: any) => {
      const imgElement = new Image();
      imgElement.src = e.target.result;
  
      imgElement.onload = () => {
        const imgInstance = new fabric.Image(imgElement, {
          scaleX: 0.5,
          scaleY: 0.5,
          left: 100,
          top: 100,
        });
        this.canvas.add(imgInstance);
      };
    };
  
    reader.readAsDataURL(file);
  }
  
  
  
  
  

  download(): void {
    const dataUrl = this.canvas.toDataURL({
      format: 'png',
      multiplier: 1,
    });
    const link = document.createElement('a');
    link.href = dataUrl;
    link.download = 'design.png';
    link.click();
  }

  save() {
    throw new Error('Method not implemented.');
  }

  redo() {
    throw new Error('Method not implemented.');
  }

  undo() {
    throw new Error('Method not implemented.');
  }
}
